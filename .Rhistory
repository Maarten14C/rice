  expect_equal(result, c(640.5, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.5, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.475, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.47458, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.47458, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.47458, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.47458, 436.3), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-5)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(result, c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(unname(result), c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(unname(result), c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(unname(result), c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("fractions returns ...", {
  Cs <- c(.02, .05, .03, .04) # carbon contents of each fraction, out of 1
  wghts <- c(5, 4, 2, .5) # weights for all fractions, e.g., in mg
  ages <- c(130, 120, 125, NA) # ages of all fractions. The unmeasured one is NA
  errors <- c(10, 12, 10, NA) # errors, unmeasured is NA
  result <- fractions(150, 20, Cs, wghts, ages, errors) # assuming a bulk age of 150 +- 20 C14 B
  expect_equal(unname(result), c(640.474582, 436.327848), tolerance=1e-3)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4931, 19.9), tolerance=1e-5)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4931, 19.9), tolerance=1e-5)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4931, 19.9), tolerance=1e-5)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4930.60, 20.2), tolerance=.1)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4930.60, 20.2), tolerance=.1)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4930.60, 20.2), tolerance=.1)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  expect_equal(unname(result$obs), c(4930.60, 20.2), tolerance=.1)
})
  result <- contaminate(5000, 20, 1, .05, 1)
result
result$
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(result$obs), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(result$obs), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(result$obs), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(result), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(result), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(unlist(result)), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(unlist(result)), c(4931, 20), tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(unname(unlist(result)), c(4931, 20), tolerance=2)
})
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
result
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1)
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0, MC=F)
clean(5000, 20, 1, 0, 1, 0, MC=F)
clean(5000, 20, 1, 0, 1, 0, MC=F)
clean(5000, 20, 1, 0, 1, 0, MC=F)
clean(5000, 20, 1, 0, 1, 0, MC=F)
clean(5000, 20, 1, 0, 1, 0, MC=F)
test_that("contaminate returns correct updated result", {
  result <- contaminate(5000, 20, 1, .05, 1) # uses MC
  result <- round(result$obs,0)
  expect_equal(result[1], 4931, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
result
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0)
clean(5000, 20, 1, 0, 1, 0, MC=F)
clean(5000, 20, 1, 0, 1, 0, MC=F)
F14CtoC14
load_all()
F14CtoC14(1.10, 0.5)
load_all()
F14CtoC14(1.10, 0.5)
F14CtoC14(1.10, 0.5)
F14CtoC14(1.10, 0.05)
F14CtoC14(1.10, 0.005)
F14CtoC14(1.10, 0.005) 
F14CtoC14(.80, 0.005)
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.05130, 79.93101), tolerance = 1e-5)
})
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.05130, 79.93101), tolerance = 1e-5)
})
F14CtoC14(.80, 0.005)
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.05130, 79.93101), tolerance = 1e-5)
})
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.05130, 79.93101), tolerance = 1e-5)
})
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.05130, 79.93101), tolerance = 1e-5)
})
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.05130, 79.93101), tolerance = 1e-5)
})
test_that("F14CtoC14 returns expected C14 age", {
  result <- as.vector(F14CtoC14(.5, .005))
  expect_length(result, 2)
  expect_equal(result, c(5568.051301, 80.330000), tolerance = 1e-5)
})
test_that("calBPtoF14C returns expected F14C values", {
  # Example test input
  calBP <- 2000
  # Run the function with known input
  result <- calBPtoF14C(calBP)
  # Check that the result is a numeric vector of length 2 (F14C, uncertainty)
  expect_length(result, 2)
  # Check that the values are within expected bounds
  expect_gt(result[1], 0)     # F14C > 0
  # check with expected result
  expected <- matrix(c(0.7728371, 0.00134808), nrow=1)
  expect_equal(round(result,4), round(expected,4), tolerance = 1e-5)
})
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
test_that("contaminate returns correct updated result", {
  result <- clean(5000, 20, 1, 0, 1) # no MC
  result <- round(result$obs,0)
  expect_equal(result[1], 5070.3, tolerance=2)
  expect_equal(result[2], 20, tolerance=2)
})
clean(5000, 20, 1, 0, 1, 0)
tmp <- clean(5000, 20, 1, 0, 1, 0)
tmp
tmp
tmp
tmp
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
test_that("Monte Carlo output converges with increasing samples", {
  r1 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=100, visualise=FALSE, talk=FALSE)
  r2 <- clean(4000, 30, 10, 2, 1, 0.01, MC=TRUE, its=5000, visualise=FALSE, talk=FALSE)
  expect_true(abs(r1$F14C["mean"] - r2$F14C["mean"]) < 0.01)
})
muck(600, 30, 2000, 0, 1, .01)
tmp <- muck(600, 30, 2000, 0, 1, .01)
tmp
tmp$perc
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
expect_true
expect_true
devtools::test()
devtools::test()
devtools::test()
fractions
devtools::test()
result <- push.normal(250, 25, 50, 10)
result
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
for(i in 1:20) test()
for(i in 1:20) test()
devtools::test()
update.packages()
check()
  result <- calib.t(2450, 50)
result
length(result)
check()
weighted_means
devtools::test()
devtools::test()
build()
devtools::test()
check()
check()
check()
check()
rhub::rhub_check()
rhub::rhub_check()
build()
build()
build_vignettes()
build()
install()
build_vignettes();build();install()
q()
require(devtools)
build_vignettes();build();install()
rhub::rhub_check()
build_vignettes();build();install()
build_vignettes();build();install()
rice::howmanyC14
build_vignettes();build();install()
build_vignettes();build();install()
data.frame(9)
data.frame(9,1)
data.frame(c(9,1))
data.frame(9,1,4)
nrow(data.frame(9,1,4))
data.frame(1:10,1:10)
build_vignettes();build();install()
rhub::rhub_check()
overlap
rice::overlap
require(rice)
overlap
ls()
q()
