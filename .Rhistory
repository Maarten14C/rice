load_all(ri)
tmp <- overlap(y, er, cc=1:2)
load_all(ri)
tmp <- overlap(y, er, cc=1:2)
load_all(ri)
tmp <- overlap(y, er, cc=1:2)
load_all(ri)
tmp <- overlap(y, er, cc=1:2)
tmp <- overlap(shroud$y, shroud$er)
load_all(ri)
tmp <- overlap(shroud$y, shroud$er)
39.6+55.2
load_all(ri)
tmp <- overlap(shroud$y, shroud$er)
load_all(ri)
tmp <- overlap(shroud$y, shroud$er)
load_all(ri)
tmp <- overlap(shroud$y, shroud$er)
tmp <- overlap(y, er, cc=1:2)
load_all(ri)
tmp <- overlap(y, er, cc=1:2)
tmp <- overlap(y, er, cc=1:2)
load_all(ri)
tmp <- overlap(y, er, cc=1:2)
document(ri)
tmp <- overlap(y, er, cc=1:2)
tmp <- overlap(y, er, cc=1:2, deltaR=c(0,-91), deltaSTD=c(0,52))
document(ri)
load_all(ri)
document(ri)
tmp <- overlap(y, er, cc=1:2, deltaR=c(0,-91), deltaSTD=c(0,52))
document(ri)
document(ri)
load_all(ri)
load_all(ri)
tmp <- overlap(y, er, cc=1:2, deltaR=c(0,-91), deltaSTD=c(0,52))
load_all(ri)
tmp <- overlap(y, er, cc=1:2, deltaR=c(0,-91), deltaSTD=c(0,52))
load_all(ri)
tmp <- overlap(y, er, cc=1:2, deltaR=c(0,-91), deltaSTD=c(0,52))
load_all(ri)
document(ri)
document(ri)
document(ri)
document(ri)
document(ri)
document(ri)
start
end
curve(dweibull(1:200, 2, 80)
)
plot(1:200, dweibull(1:200, 2, 80))
plot(1:200, dweibull(1:200, 2, 50))
plot(1:200, dweibull(1:200, 2, 50), type='l')
plot(1:200, dweibull(1:200, 2, 2/50), type='l')
plot(1:200, dweibull(1:200, shape=2, scale=80.5), type='l')
plot(1:200, dweibull(1:200, shape=2.5, scale=83), type='l')
lines(1:200, dgamma(1:200, shape=2.5, scale=83), col=2)
plot(1:200, dweibull(1:200, shape=2.5, scale=80), type='l')
weibull_shape <- 2
weibull_scale <- 80
# Parameters for Lognormal
lognormal_meanlog <- log(80) - 0.5  # Adjust to align means
lognormal_sdlog <- 0.5
# Generate x values
x <- seq(0, 200, length.out = 300)
# Calculate densities
weibull_density <- dweibull(x, shape = weibull_shape, scale = weibull_scale)
lognormal_density <- dlnorm(x, meanlog = lognormal_meanlog, sdlog = lognormal_sdlog)
# Plot
plot(x, weibull_density, type = "l", lwd = 2, col = "blue",
     main = "Weibull vs Lognormal Distributions",
     xlab = "x", ylab = "Density")
lines(x, lognormal_density, lwd = 2, col = "red")
legend("topright", legend = c("Weibull", "Lognormal"),
       col = c("blue", "red"), lwd = 2)
calBPtoF14C
getwd()
ri
load_all(ri)
lifetime(1900, 1980)
load_all(ri)
lifetime(1900, 1980)
lifetime(1900, 1980, BCAD=T)
load_all(ri)
lifetime(1900, 1980, BCAD=T)
# Define the Gompertz-Makeham parameters
A <- 0.0001  # Age-independent mortality (accidents, external factors)
B <- 0.00001 # Scale of age-dependent mortality
C <- 0.1     # Exponential growth rate of mortality with age
# Define age range
age <- 0:120
# Calculate mortality rate (probability of dying each year)
mortality_rate <- A + B * exp(C * age)
# Create the plot using base R
plot(
  age, mortality_rate,
  type = "l",  # Line plot
  col = "blue",
  log = "y",   # Logarithmic scale for y-axis
  lwd = 2,     # Line width
  xlab = "Age (years)",
  ylab = "Mortality Rate (log scale)",
  main = "Human Mortality Rate (Probability of Dying Each Year)"
)
# Add grid lines for better visualization
grid()
2700+900+6675+2225
source("standards.R")
source("~/Dropbox/standards.R")
source("~/Dropbox/devsoftware/standards.R")
plot_standard(7742, below=-2000, as.F=T) # until recent, modern standard, measured 3248 times
# 33333 390 # background, Klondike mammoth bone (dated to c. 700 ka based on tephra), until 2024
plot_standard(7742, as.F=T) # until recent, modern standard, measured 3248 times
plot_standard(33333)
plot_standard(15593)
.2*80e3
.2*100e3
plot_standard(12771)
plot_standard(45270)
dev.new()
plot_standard(33333)
plot_standard(33333, downto=30e3)
F14CtoC14
C14toF14C
install.packages("maps")
library(maps)
# Plot world map with land areas filled and oceans as the background
map("world", fill = TRUE, col = "tan", bg = "lightblue", mar = c(0, 0, 0, 0))
dev.off()
dev.off()
map("world", fill = TRUE, col = "tan", bg = "lightblue", mar = c(0, 0, 0, 0))
lon_range <- c(-80, 20)   # Longitude range
lat_range <- c(-60, 60)   # Latitude range
# Plot the region with ocean in the background
map("world", xlim = lon_range, ylim = lat_range, fill = TRUE, col = "tan", bg = "lightblue", mar = c(0, 0, 0, 0))
map("world", xlim = lon_range, ylim = lat_range, wrap = TRUE, fill = TRUE, col = "tan", bg = "lightblue", mar = c(0, 0, 0, 0))
lon_range <- c(-30, 20)   # Longitude range
lat_range <- c(30, 70)   # Latitude range
map("world", xlim = lon_range, ylim = lat_range, wrap = TRUE, fill = TRUE, col = "tan", bg = "lightblue", mar = c(0, 0, 0, 0))
install.packages("maptiles")
library(maptiles)
library(ggplot2)
bbox <- c(-160, -60, -100, 30)
# Download OSM tiles
ocean_tiles <- get_tiles(
  bbox = bbox, provider = "Stamen.TerrainBackground", zoom = 3
)
# Plot the tiles
plot_tiles(ocean_tiles)
lon_min <- -160
lat_min <- -60
lon_max <- -100
lat_max <- 30
# Create the extent object for the bounding box
extent <- c(lon_min, lon_max, lat_min, lat_max)
ocean_tiles <- get_tiles(extent = extent, provider = "Stamen.TerrainBackground", zoom = 3)
extent <- c(lon_min, lon_max, lat_min, lat_max)
# Get tiles using the Stamen.TerrainBackground provider
ocean_tiles <- get_tiles(extent = extent, provider = "Stamen.TerrainBackground", zoom = 3)
ocean_tiles <- get_tiles(
  x = c(-160, -60, -100, 30),  # xmin, ymin, xmax, ymax (bbox format)
  provider = "Stamen.TerrainBackground",
  zoom = 3
)
install.packages("slippymath")
library(slippymath)
# Define bounding box and zoom level
bbox <- c(-160, -60, -100, 30)  # xmin, ymin, xmax, ymax
zoom <- 3
# Generate tile index and download tiles
tiles <- slippymath::bbox_to_tile(bbox, zoom = zoom)
print(tiles)
slippymath::bbox_to_tile_grid(bbox, zoom=zoom)
install.packages('rintcal')
require(rintcal)
cc <- ccurve('intcal20')
cc
cc <- ccurve('intcal20.14c')
ccurve
getwd()
q(0
y
R
q()
getwd()
require(rintcal)
ccurve
cc <- ccurve("intcal20.14c")
cc
getwd()
q()
require(rintcal)
cc <- ccurve("intcal20.14c")
cc
require(rice)
D14CtoF14C
q()
require(rice)
cc <- ccurve("intcal20.14c")
cc
cc <- ccurve("intcal20.14c", as.F=T)
cc
plot(cc[,1], cc[,2]-cc[,3], type='l')
lines(cc[,1], cc[,2]+cc[,3])
cc <- ccurve("intcal20.14c", as.F=T)
cc
cc <- ccurve("intcal20.14c", as.F=F)
cc
getwd()
ri
getwd()
require(devtools)
install(ri)
q()
require(devtools)
install(ri)
install(ri)
remove.packages('rnaturalearth')
require(rice)
install(ri)
q()
getwd()
install(ri)
require(devtools)
install(ri)
document()
document(ri)
document(ri)
install(ri)
q()
require(rice)
find.shells(53, -11)
maps::map
load_all(ri)
require(devtools)
load_all(ri)
find.shells(53, -11)
load_all(ri)
find.shells(53, -11)
ggplot2::map_data
?ggplot2::map_data
maps::
load_all(ri)
find.shells(53, -11)
library(ggplot2)
find.shells(53, -11)
load_all(ri)
find.shells(53, -11)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
install.packages('rnaturalearth')
tmp <- find.shells(53, -11)
dev.off()
tmp <- find.shells(53, -11)
maps::
maps::map.where
maps::map.where
?maps::map.where
?maps::map
?maps::map()
maps::map()
maps::map(c(-30, 0, 30, 60)
)
?maps
?maps::map
maps::map(xlim=c(-30, 0), ylim=c(30, 60))
tmp
tmp[,2]
tmp[,1]
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
remove.packages('rnaturalearth')
tmp <- find.shells(53, -11)
remove.packages('rnaturalearth')
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
load_all(ri)
tmp <- find.shells(53, -11)
tmp <- find.shells(0, 50)
load_all(ri)
tmp <- find.shells(0, 50)
load_all(ri)
tmp <- find.shells(0, 50)
load_all(ri)
tmp <- find.shells(0, 50)
install.packages('rnaturalearth')
tmp <- find.shells(0, 50)
sessionInfo()
sf %in% sessionInfo()
"sf" %in% sessionInfo()
"rice" %in% sessionInfo()
"rice" %in% search()
require(rice)
"rice" %in% search()
"sessionInfo()
sessionInfo()
"maps" %in% search()
library(maps)
"maps" %in% search()
tmp <- find.shells(0, 50)
if (requireNamespace("ggplot2", quietly = TRUE)) {
  message("ggplot2 is available")
} else {
  message("ggplot2 is not available")
}
t
head(tmp)
load_all(ri)
tmp <- find.shells(0, 50)
remove.packages('rnaturalearth')
tmp <- find.shells(0, 50)
load_all(ri)
tmp <- find.shells(0, 50)
tmp <- find.shells(0, 50)
tmp <- map.shells()
tmp <- find.shells(0, 50)
tmp <- find.shells(0, 50)
load_all(ri)
tmp <- find.shells(0, 50)
tmp <- map.shells()
load_all(ri)
tmp <- map.shells()
install.packages('rnaturalearth')
tmp <- map.shells()
tmp <- find.shells(0, 50)
load_all(ri)
remove.packages('rnaturalearth')
tmp <- find.shells(0, 50)
install.packages('rnaturalearth')
tmp <- find.shells(0, 50)
remove.packages('rnaturalearth')
load_all(ri)
tmp <- find.shells(0, 50)
tmp <- map.shells()
install.packages('rnaturalearth')
tmp <- map.shells()
?map
devtools::install_github(“maarten14C/rintcal”)
devtools::install_github("maarten14C/rintcal")
find.shells(5,54)
find.shells(-20,54)
find.shells(-28,54)
find.shells(-28,24)
find.shells(-80,24)
find.shells(-90,24)
find.shells(-90,20)
gertwd()
getwd()
ri
require(devtools)
check(ri)
install.packages('rnaturalearth')
check(ri)
draw.ccurve(1600, 2020, BCAD=TRUE, cc2='nh1')
tmp <- ccurve()
tmp <- ccurve('nh1')
ccurve
tmp <- ccurve('nh1')
require(rintcal)
tmp <- ccurve('nh1')
reload(rintcal)
reload('rintcal')
reload('~/Dropbox/devsoftware/rintcal')
reload('~/Dropbox/devsoftware/rintcal')
q()
tmp <- ccurve('nh1')
require(rintcal)
tmp <- ccurve('nh1')
tmp
require(rice)
tmp <- ccurve('nh1')
dat(shells)
data(shells)
installed.packages()
ri
check(ri)
require(devtools)
check(ri)
x <- seq(0, 55e3, length=1e3)
cc <- calBPtoC14(x)
cc
x <- seq(0, 55e3, length=1e3)
cc <- calBPtoC14(x)
x <- seq(0, 55e3, length=1e3)
cc <- calBPtoC14(x)
Dcc <- calBPtoD14C(x)
par(mar=c(4,3,1,3), bty="l")
plot(x/1e3, Dcc[,1]+Dcc[,2], type="l", xlab="kcal BP", ylab="")
mtext(expression(paste(Delta, ""^{14}, "C")), 2, 1.7)
lines(x/1e3, Dcc[,1]-Dcc[,2])
par(new=TRUE)
plot(x/1e3, (cc[,1]-cc[,2])/1e3, type="l", xaxt="n", yaxt="n", col=4, xlab="", ylab="")
lines(x/1e3, (cc[,1]+cc[,2])/1e3, col=4)
mtext(expression(paste(""^{14}, "C kBP")), 4, 2, col=4)
axis(4, col=4, col.axis=4, col.ticks=4)
cc
cc
dim(cc)
x <- seq(0, 55e3, length=1e3)
cc <- calBPtoC14(x)
cc <- cbind(cc)
plot(x/1e3, (cc[,1]-cc[,2])/1e3, type="l", xaxt="n", yaxt="n", col=4, xlab="", ylab="")
lines(x/1e3, (cc[,1]+cc[,2])/1e3, col=4)
q()
require(rintcal)
check(ri)
require(devtools)
chekc()
check()
check(ri)
check(ri)
document(ri)
document(ri)
check(ri)
ri
getwd()
check("~/Dropbox/devsoftware/rbacon")
q()
require(devtools)
ri
install(ri)
require(rice)
map.shells(0,60,30,-30)
map.shells(30,60,60,-30)
myshells <- map.shells(S=54, W=-8, N=61, E=0)
myshells <- map.shells(S=54, W=-8, N=61, E=0, scale="l")
map.shells
rice:::ocean.map
myshells <- map.shells(S=54, W=-8, N=61, E=0, scale="large")
install.packages('rnaturalearthhires')
devtools::install_github("ropensci/rnaturalearthhires")
load_all(ri)
myshells <- map.shells(S=54, W=-8, N=61, E=0, scale="large")
myshells <- map.shells(S=54, W=-8, N=61, E=0, scale="medium")
map.shells(30,60,60,-30)
map.shells(30,60,30,-30)
map.shells(30,60,60,-30)
map.shells(30,30,60,-30)
map.shells(30,30,60,-10)
map.shells(S=30, N=60, W=-10, E=20)
map.shells(S=30, N=60, W=-10, E=30)
map.shells(S=30, N=60, W=-10, E=60)
map.shells(S=30, N=60, W=-10, E=60)
N_UK <- map.shells(53, -11, 60, 2, scale="medium")
N_UK <- map.shells(53, -11, 60, 2, scale="medium")
N_UK <- find.shells(60, 0, scale="medium")
N_UK <- find.shells(0, 60, scale="medium")
N_UK <- find.shells(0, 50, scale="medium")
N_UK <- find.shells(0, 55, scale="medium")
UK <- find.shells(0, 55, scale="medium")
mean(UK$dR)
UK <- find.shells(0, 0, scale="medium")
UK <- find.shells(0, 0, 5, scale="medium")
UK <- find.shells(0, 0, scale="medium")
UK <- find.shells(-60, 0, scale="medium")
UK <- find.shells(-60, 20, scale="medium")
UK <- find.shells(-60, 20, 10, scale="medium")
UK <- find.shells(-60, 20, 20, scale="medium")
UK <- find.shells(-60, 20, 30, scale="medium")
UK <- find.shells(-60, 20, 40, scale="medium")
UK <- find.shells(-70, 20, 40, scale="medium")
UK <- find.shells(-70, 20, 20, scale="medium")
UK <- find.shells(-70, 20, 30, scale="medium")
Caribbean <- find.shells(-70, 20, 30, scale="medium")
spell_check(ri)
setwd("~/Dropbox/devsoftware/rice")
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_check()
document()
document()
rhub::rhub_check()
build_vignettes()
document()
devtools::check(build_args = "--no-build-vignettes")
devtools::build_vignettes()
devtools::check(build_args = "--no-build-vignettes")
devtools::build_vignettes()
devtools::build()
rmarkdown::render("vignettes/rice.Rmd", output_format = "html_vignette")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
build()
devtools::check(args = "--as-cran")
rhub::rhub_check()
devtools::install()
rhub::rhub_check()
document()
q()
